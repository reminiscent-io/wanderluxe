Key Fixes in combined-auth.ts
typescript
// Updated session configuration for Replit compatibility
app.use(
  session({
    secret: process.env.SESSION_SECRET || 'your-secret-key',
    resave: false,
    saveUninitialized: false,
    cookie: {
      secure: true, // Always true for Replit HTTPS
      sameSite: 'none', // Required for cross-origin in Replit
      domain: '.replit.dev', // Allow all subdomains
      httpOnly: true,
      maxAge: 7 * 24 * 60 * 60 * 1000 // 1 week
    }
  })
);

// Enhanced LocalStrategy with better validation
passport.use(
  new LocalStrategy({
    usernameField: 'username',
    passwordField: 'password',
    passReqToCallback: false
  }, async (username, password, done) => {
    try {
      const normalizedUsername = username.toLowerCase().trim();
      const [user] = await db
        .select()
        .from(users)
        .where(eq(users.username, normalizedUsername))
        .limit(1);

      if (!user) return done(null, false, { message: "Invalid credentials" });
      
      const isValid = await bcrypt.compare(password.trim(), user.password);
      if (!isValid) return done(null, false, { message: "Invalid credentials" });

      return done(null, user);
    } catch (err) {
      return done(err);
    }
  })
);

// Fixed deserialization with type safety
passport.deserializeUser(async (id: unknown, done) => {
  try {
    const numericId = Number(id);
    if (isNaN(numericId)) return done(new Error('Invalid user ID'));
    
    const [user] = await db
      .select()
      .from(users)
      .where(eq(users.id, numericId))
      .limit(1);

    user ? done(null, user) : done(new Error('User not found'));
  } catch (err) {
    done(err);
  }
});

// Enhanced registration validation
app.post("/api/register", async (req, res, next) => {
  try {
    const { username, password } = insertUserSchema.parse(req.body);
    const normalizedUsername = username.toLowerCase().trim();

    const [existingUser] = await db
      .select()
      .from(users)
      .where(eq(users.username, normalizedUsername));

    if (existingUser) {
      return res.status(409).json({ message: "Username already exists" });
    }

    const hashedPassword = await bcrypt.hash(password.trim(), 12);
    const [newUser] = await db
      .insert(users)
      .values({
        username: normalizedUsername,
        password: hashedPassword,
      })
      .returning();

    req.login(newUser, (err) => {
      if (err) return next(err);
      return res.status(201).json({
        id: newUser.id,
        username: newUser.username
      });
    });
  } catch (error) {
    next(error);
  }
});

// Improved login error handling
app.post("/api/login", (req, res, next) => {
  passport.authenticate("local", (err: Error, user?: User, info?: { message: string }) => {
    if (err) return next(err);
    if (!user) return res.status(401).json({ message: info?.message || "Authentication failed" });

    req.logIn(user, (err) => {
      if (err) return next(err);
      return res.json({
        id: user.id,
        username: user.username
      });
    });
  })(req, res, next);
});