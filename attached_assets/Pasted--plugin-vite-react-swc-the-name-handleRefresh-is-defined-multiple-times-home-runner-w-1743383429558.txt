[plugin:vite:react-swc] × the name `handleRefresh` is defined multiple times
     ╭─[/home/runner/workspace/src/components/trip/TimelineView.tsx:48:1]
  45 │   };
  46 │ 
  47 │   // Track important user interactions
  48 │   const handleRefresh = useCallback(async () => {
     ·         ──────┬──────
     ·               ╰── previous definition of `handleRefresh` here
  49 │     trackTimelineAction('refresh_timeline');
  50 │     setIsRefreshing(true);
  51 │     try {
  52 │       await Promise.all([refreshEvents(), refreshDays(), refreshTransportation()]);
  53 │       const { data, error } = await supabase
  54 │         .from('trips')
  55 │         .select('arrival_date, departure_date')
  56 │         .eq('trip_id', tripId)
  57 │         .single();
  58 │ 
  59 │       if (!error && data) {
  60 │         if (data.arrival_date && data.departure_date) {
  61 │           setLocalTripDates({
  62 │             arrival_date: data.arrival_date,
  63 │             departure_date: data.departure_date,
  64 │           });
  65 │           trackTimelineAction('timeline_refresh_success');
  66 │         }
  67 │       }
  68 │       toast.success('Timeline updated successfully');
  69 │     } catch (error) {
  70 │       console.error('Error refreshing timeline:', error);
  71 │       toast.error('Failed to refresh timeline');
  72 │       trackTimelineAction('timeline_refresh_error', { error: error?.message });
  73 │     } finally {
  74 │       setIsRefreshing(false);
  75 │     }
  76 │   }, [refreshEvents, refreshDays, refreshTransportation, tripId]);
  77 │ 
  78 │   const { days, refreshDays } = useTripDays(tripId);
  79 │   const { events, refreshEvents } = useTimelineEvents(tripId);
  80 │   const { transportationData, refreshTransportation } = useTransportationEvents(tripId);
  81 │   const [isRefreshing, setIsRefreshing] = useState(false);
  82 │ 
  83 │   const [localTripDates, setLocalTripDates] = useState<{
  84 │     arrival_date: string | null;
  85 │     departure_date: string | null;
  86 │   }>({
  87 │     arrival_date: initialTripDates?.arrival_date || null,
  88 │     departure_date: initialTripDates?.departure_date || null,
  89 │   });
  90 │ 
  91 │   //Load google maps api on the timeline page here
  92 │   useEffect(() => {
  93 │     loadGoogleMapsAPI();
  94 │   }, []);
  95 │ 
  96 │   useEffect(() => {
  97 │     const newArrival = initialTripDates?.arrival_date;
  98 │     const newDeparture = initialTripDates?.departure_date;
  99 │     if (newArrival && newDeparture) {
 100 │       if (newArrival !== localTripDates.arrival_date || newDeparture !== localTripDates.departure_date) {
 101 │         console.log('Updating trip dates from props:', { newArrival, newDeparture });
 102 │         setLocalTripDates({
 103 │           arrival_date: newArrival,
 104 │           departure_date: newDeparture,
 105 │         });
 106 │       }
 107 │     }
 108 │   }, [initialTripDates, localTripDates]);
 109 │ 
 110 │   useEffect(() => {
 111 │     if (!localTripDates.arrival_date || !localTripDates.departure_date) {
 112 │       console.log('Trip dates missing on mount, fetching fresh data');
 113 │       fetchTripData();
 114 │     }
 115 │   }, []);
 116 │ 
 117 │   const handleRefresh = useCallback(async () => {
     ·         ──────┬──────
     ·               ╰── `handleRefresh` redefined here
 118 │     setIsRefreshing(true);
 119 │     try {
 120 │       await Promise.all([refreshEvents(), refreshDays(), refreshTransportation()]);
     ╰────
/home/runner/workspace/src/components/trip/TimelineView.tsx:48:1
Click outside, press Esc key, or fix the code to dismiss.
You can also disable this overlay by setting server.hmr.overlay to false in vite.config.ts.